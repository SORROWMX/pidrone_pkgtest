#
# various settings suggested by other users
#
# derived from the Paradox pair programming screenrc, UChicago 2010
#   ~ yes, we are all total newbs ~
#
shell /bin/bash
startup_message off

#defscrollback 5000
defscrollback 5000

escape ``

# this hard status was stolen from the net, all credit goes to its originator
hardstatus             alwayslastline
#hardstatus string '%{= mK}%-Lw%{= KW}%50>%n%f* %t%{= mK}%+Lw%< %{= kG}%-=%D %d %M %Y %c:%s%{-}'
hardstatus string '%{= kG}[ %{G}%H %{g}][%= %{= kw}%?%-Lw%?%{r}(%{W}%n*%f%t%?(%u)%?%{r})%{w}%?%+Lw%?%?%= %{g}][%{B} %d/%m %{W}%c %{g}]'

# A hint for using multiuser mode:  make sure that both parties have identically
# sized terminals, otherwise there could be graphical mismatches and undrawn text
# for one party :(  .

# turn multiuser mode on so others can connect.
multiuser on

# add the specified user to this screen session so that they can connect.
# the initiating user is allowed automatically, but add both so either can
# run this script without modification.

# Starts a new screen with title " MAKE"
# this is basically equivalent to pressing the following from within screen:
# `c (starts a new window)
# `:title " MAKE" (sets the title to " MAKE")
#screen -t " MAKE"

#stuff "unset STY\n"
#stuff "screen\n"

# 1. Start roscore first - required for all ROS nodes
screen -t "rcore"
stuff "roscore\n"
stuff ""

# 2. Start rosbridge and web_video_server for web interface
screen -t "rosbridge"
stuff "echo 'Waiting for roscore...'\n"
stuff "until rostopic list > /dev/null 2>&1; do sleep 1; echo 'Waiting for roscore...'; done\n"
stuff "echo 'ROS core detected, starting rosbridge'\n"
stuff "roslaunch --wait rosbridge_server rosbridge_websocket.launch\n"

screen -t "web_vid_serv"
stuff "echo 'Waiting for roscore...'\n"
stuff "until rostopic list > /dev/null 2>&1; do sleep 1; done\n"
stuff "echo 'ROS core detected, starting web video server'\n"
stuff "rosrun web_video_server web_video_server\n"

# 3. Start hardware interface nodes
screen -t "TOF"
stuff "echo 'Waiting for roscore...'\n"
stuff "until rostopic list > /dev/null 2>&1; do sleep 1; done\n"
stuff "echo 'ROS core detected, starting TOF sensor'\n"
stuff "source ~/catkin_ws/install/setup.bash && roslaunch launch/tof.launch\n"

# 4. Start rangefinder relay (после TOF)
screen -t "Range Relay"
stuff "cd $(rospack find pidrone_pkg)/scripts/\n"
stuff "echo 'Waiting for TOF sensor...'\n"
stuff "until rostopic list | grep -q '/pidrone/range'; do sleep 1; done\n"
stuff "echo 'TOF sensor detected, starting rangefinder relay'\n"
stuff "python test_msp2_sensor_range.py\n"

# 5. Start camera
screen -t "Vision"
stuff "cd $(rospack find pidrone_pkg)/scripts\n"
stuff "echo 'Waiting for TOF sensor...'\n"
stuff "until rostopic list | grep -q '/pidrone/range'; do sleep 1; done\n"
stuff "echo 'TOF sensor detected, starting camera node'\n"
stuff "roslaunch --wait pidrone_pkg raspicam_node.launch\n"

# 6. Start optical flow
screen -t "Optical Flow"
stuff "cd $(rospack find pidrone_pkg)/scripts\n"
stuff "echo 'Waiting for camera topics...'\n"
stuff "until rostopic list | grep -q '/raspicam_node/image'; do sleep 1; done\n"
stuff "echo 'Camera topics detected, starting optical flow node'\n"
stuff "python test_msp2_optical_flow.py\n"

# 7. Start ArUco маркеров
screen -t "ArUco"
stuff "cd $(rospack find pidrone_pkg)/scripts/aruco\n"
stuff "echo 'Waiting for camera topics...'\n"
stuff "until rostopic list | grep -q '/raspicam_node/image_raw'; do sleep 1; done\n"
stuff "echo 'Camera topics detected, starting ArUco marker detection'\n"
stuff "python3 recognition_of_aruco_marker_node.py _image_topic:=/raspicam_node/image_raw _map_path:=$(rospack find pidrone_pkg)/scripts/aruco/sample_map.txt\n"

# Free terminals for user commands
screen -t "free1"
stuff "cd $(rospack find pidrone_pkg)/scripts/\n"

screen -t "free2"
stuff "cd $(rospack find pidrone_pkg)/scripts/\n"
